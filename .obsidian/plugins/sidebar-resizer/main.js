/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SidebarWidthPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  increment: "10%",
  leftSidebarStandardWidth: "20%",
  rightSidebarStandardWidth: "20%"
  // sidebarUnit: "px"
};
var SidebarWidthSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Width increment").setDesc('Amount to increase or decrease the sidebar width (e.g., "50px" or "10%")').addText((text) => text.setPlaceholder("Enter increment").setValue(this.plugin.settings.increment).onChange(async (value) => {
      this.plugin.settings.increment = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Left sidebar standard width").setDesc('Standard width for the left sidebar (e.g., "100px" or "20%")').addText((text) => text.setPlaceholder("Enter standard width").setValue(this.plugin.settings.leftSidebarStandardWidth).onChange(async (value) => {
      this.plugin.settings.leftSidebarStandardWidth = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Right sidebar standard width").setDesc('Standard width for the right sidebar (e.g., "100px" or "20%")').addText((text) => text.setPlaceholder("Enter standard width").setValue(this.plugin.settings.rightSidebarStandardWidth).onChange(async (value) => {
      this.plugin.settings.rightSidebarStandardWidth = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/main.ts
function normalizeToPixels(width) {
  let widthPx = 0;
  if (width.endsWith("%")) {
    const percentage = parseFloat(width);
    widthPx = window.innerWidth * (percentage / 100);
  } else {
    widthPx = parseFloat(width);
  }
  return widthPx;
}
var SidebarWidthPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SidebarWidthSettingTab(this.app, this));
    this.addCommand({
      id: "increase-left-sidebar-width",
      name: "Increase left sidebar width",
      callback: () => this.adjustSidebarWidth(".workspace-split.mod-left-split", this.settings.increment, "left")
    });
    this.addCommand({
      id: "decrease-left-sidebar-width",
      name: "Decrease left sidebar width",
      callback: () => this.adjustSidebarWidth(".workspace-split.mod-left-split", `-${this.settings.increment}`, "left")
    });
    this.addCommand({
      id: "increase-right-sidebar-width",
      name: "Increase right sidebar width",
      callback: () => this.adjustSidebarWidth(".workspace-split.mod-right-split", this.settings.increment, "right")
    });
    this.addCommand({
      id: "decrease-right-sidebar-width",
      name: "Decrease right sidebar width",
      callback: () => this.adjustSidebarWidth(".workspace-split.mod-right-split", `-${this.settings.increment}`, "right")
    });
    this.addCommand({
      id: "toggle-left-sidebar-default",
      name: "Toggle left sidebar (standard width)",
      callback: () => this.toggleSidebarWidth(".workspace-split.mod-left-split", this.settings.leftSidebarStandardWidth, "left")
    });
    this.addCommand({
      id: "toggle-right-sidebar-default",
      name: "Toggle right sidebar (standard width)",
      callback: () => this.toggleSidebarWidth(".workspace-split.mod-right-split", this.settings.rightSidebarStandardWidth, "right")
    });
    this.addCommand({
      id: "expand-both-sidebar-widths",
      name: "Expand both sidebars to standard widths",
      callback: () => this.setBothSidebarWidths(this.settings.leftSidebarStandardWidth, this.settings.rightSidebarStandardWidth)
    });
    this.addCommand({
      id: "collapse-both-sidebar-widths",
      name: "Collapse both sidebars",
      callback: () => this.setBothSidebarWidths("0", "0")
    });
  }
  onunload() {
  }
  adjustSidebarWidth(selector, adjustment, side) {
    const sidebar = document.querySelector(selector);
    const workspace = this.app.workspace;
    if (sidebar) {
      const currentWidth = sidebar.getBoundingClientRect().width;
      let adjustmentPx = normalizeToPixels(adjustment);
      let wVal = currentWidth + adjustmentPx;
      if (wVal <= 0) {
        if (side === "left" && !workspace.leftSplit.collapsed) {
          workspace.leftSplit.collapse();
        } else if (side === "right" && !workspace.rightSplit.collapsed) {
          workspace.rightSplit.collapse();
        }
      } else {
        let newWidth = `${wVal}px`;
        if (side === "left" && workspace.leftSplit.collapsed) {
          workspace.leftSplit.expand();
          newWidth = `${normalizeToPixels(this.settings.leftSidebarStandardWidth)}`;
        } else if (side === "right" && workspace.rightSplit.collapsed) {
          workspace.rightSplit.expand();
          newWidth = `${normalizeToPixels(this.settings.rightSidebarStandardWidth)}`;
        }
        sidebar.style.width = newWidth;
      }
    }
  }
  toggleSidebarWidth(selector, defaultWidth, side) {
    const sidebar = document.querySelector(selector);
    const workspace = this.app.workspace;
    if (sidebar) {
      if (side === "left") {
        workspace.leftSplit.toggle();
      } else {
        workspace.rightSplit.toggle();
      }
      let newWidth = `${normalizeToPixels(defaultWidth)}px`;
      sidebar.style.width = newWidth;
    }
  }
  setBothSidebarWidths(leftWidth, rightWidth) {
    const workspace = this.app.workspace;
    const leftSidebar = document.querySelector(".workspace-split.mod-left-split");
    const rightSidebar = document.querySelector(".workspace-split.mod-right-split");
    if (leftSidebar) {
      if (leftWidth.endsWith("%")) {
        const percentage = parseFloat(leftWidth);
        leftSidebar.style.width = `${window.innerWidth * (percentage / 100)}px`;
      } else {
        leftSidebar.style.width = leftWidth;
      }
      if (leftWidth !== "0px" && workspace.leftSplit.collapsed) {
        workspace.leftSplit.expand();
      }
    }
    if (rightSidebar) {
      if (rightWidth.endsWith("%")) {
        const percentage = parseFloat(rightWidth);
        rightSidebar.style.width = `${window.innerWidth * (percentage / 100)}px`;
      } else {
        rightSidebar.style.width = rightWidth;
      }
      if (rightWidth !== "0px" && workspace.rightSplit.collapsed) {
        workspace.rightSplit.expand();
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
